// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/akhripko/gremlin-ent/ent/persona"
	"github.com/akhripko/gremlin-ent/ent/predicate"
	"github.com/facebook/ent/dialect/gremlin"
	"github.com/facebook/ent/dialect/gremlin/graph/dsl"
	"github.com/facebook/ent/dialect/gremlin/graph/dsl/__"
	"github.com/facebook/ent/dialect/gremlin/graph/dsl/g"
)

// PersonaUpdate is the builder for updating Persona entities.
type PersonaUpdate struct {
	config
	hooks      []Hook
	mutation   *PersonaMutation
	predicates []predicate.Persona
}

// Where adds a new predicate for the builder.
func (pu *PersonaUpdate) Where(ps ...predicate.Persona) *PersonaUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetAge sets the age field.
func (pu *PersonaUpdate) SetAge(i int) *PersonaUpdate {
	pu.mutation.ResetAge()
	pu.mutation.SetAge(i)
	return pu
}

// AddAge adds i to age.
func (pu *PersonaUpdate) AddAge(i int) *PersonaUpdate {
	pu.mutation.AddAge(i)
	return pu
}

// SetName sets the name field.
func (pu *PersonaUpdate) SetName(s string) *PersonaUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the name field if the given value is not nil.
func (pu *PersonaUpdate) SetNillableName(s *string) *PersonaUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetGender sets the gender field.
func (pu *PersonaUpdate) SetGender(s string) *PersonaUpdate {
	pu.mutation.SetGender(s)
	return pu
}

// SetNillableGender sets the gender field if the given value is not nil.
func (pu *PersonaUpdate) SetNillableGender(s *string) *PersonaUpdate {
	if s != nil {
		pu.SetGender(*s)
	}
	return pu
}

// AddGenderIIDs adds the genderIs edge to Gender by ids.
func (pu *PersonaUpdate) AddGenderIIDs(ids ...int) *PersonaUpdate {
	pu.mutation.AddGenderIIDs(ids...)
	return pu
}

// AddGenderIs adds the genderIs edges to Gender.
func (pu *PersonaUpdate) AddGenderIs(g ...*Gender) *PersonaUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return pu.AddGenderIIDs(ids...)
}

// Mutation returns the PersonaMutation object of the builder.
func (pu *PersonaUpdate) Mutation() *PersonaMutation {
	return pu.mutation
}

// ClearGenderIs clears all "genderIs" edges to type Gender.
func (pu *PersonaUpdate) ClearGenderIs() *PersonaUpdate {
	pu.mutation.ClearGenderIs()
	return pu
}

// RemoveGenderIIDs removes the genderIs edge to Gender by ids.
func (pu *PersonaUpdate) RemoveGenderIIDs(ids ...int) *PersonaUpdate {
	pu.mutation.RemoveGenderIIDs(ids...)
	return pu
}

// RemoveGenderIs removes genderIs edges to Gender.
func (pu *PersonaUpdate) RemoveGenderIs(g ...*Gender) *PersonaUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return pu.RemoveGenderIIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PersonaUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.gremlinSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.gremlinSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PersonaUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PersonaUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PersonaUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PersonaUpdate) check() error {
	if v, ok := pu.mutation.Age(); ok {
		if err := persona.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf("ent: validator failed for field \"age\": %w", err)}
		}
	}
	return nil
}

func (pu *PersonaUpdate) gremlinSave(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := pu.gremlin().Query()
	if err := pu.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	return res.ReadInt()
}

func (pu *PersonaUpdate) gremlin() *dsl.Traversal {
	v := g.V().HasLabel(persona.Label)
	for _, p := range pu.predicates {
		p(v)
	}
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := pu.mutation.Age(); ok {
		v.Property(dsl.Single, persona.FieldAge, value)
	}
	if value, ok := pu.mutation.AddedAge(); ok {
		v.Property(dsl.Single, persona.FieldAge, __.Union(__.Values(persona.FieldAge), __.Constant(value)).Sum())
	}
	if value, ok := pu.mutation.Name(); ok {
		v.Property(dsl.Single, persona.FieldName, value)
	}
	if value, ok := pu.mutation.Gender(); ok {
		v.Property(dsl.Single, persona.FieldGender, value)
	}
	for _, id := range pu.mutation.RemovedGenderIsIDs() {
		tr := rv.Clone().OutE(persona.GenderIsLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range pu.mutation.GenderIsIDs() {
		v.AddE(persona.GenderIsLabel).To(g.V(id)).OutV()
	}
	v.Count()
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// PersonaUpdateOne is the builder for updating a single Persona entity.
type PersonaUpdateOne struct {
	config
	hooks    []Hook
	mutation *PersonaMutation
}

// SetAge sets the age field.
func (puo *PersonaUpdateOne) SetAge(i int) *PersonaUpdateOne {
	puo.mutation.ResetAge()
	puo.mutation.SetAge(i)
	return puo
}

// AddAge adds i to age.
func (puo *PersonaUpdateOne) AddAge(i int) *PersonaUpdateOne {
	puo.mutation.AddAge(i)
	return puo
}

// SetName sets the name field.
func (puo *PersonaUpdateOne) SetName(s string) *PersonaUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the name field if the given value is not nil.
func (puo *PersonaUpdateOne) SetNillableName(s *string) *PersonaUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetGender sets the gender field.
func (puo *PersonaUpdateOne) SetGender(s string) *PersonaUpdateOne {
	puo.mutation.SetGender(s)
	return puo
}

// SetNillableGender sets the gender field if the given value is not nil.
func (puo *PersonaUpdateOne) SetNillableGender(s *string) *PersonaUpdateOne {
	if s != nil {
		puo.SetGender(*s)
	}
	return puo
}

// AddGenderIIDs adds the genderIs edge to Gender by ids.
func (puo *PersonaUpdateOne) AddGenderIIDs(ids ...int) *PersonaUpdateOne {
	puo.mutation.AddGenderIIDs(ids...)
	return puo
}

// AddGenderIs adds the genderIs edges to Gender.
func (puo *PersonaUpdateOne) AddGenderIs(g ...*Gender) *PersonaUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return puo.AddGenderIIDs(ids...)
}

// Mutation returns the PersonaMutation object of the builder.
func (puo *PersonaUpdateOne) Mutation() *PersonaMutation {
	return puo.mutation
}

// ClearGenderIs clears all "genderIs" edges to type Gender.
func (puo *PersonaUpdateOne) ClearGenderIs() *PersonaUpdateOne {
	puo.mutation.ClearGenderIs()
	return puo
}

// RemoveGenderIIDs removes the genderIs edge to Gender by ids.
func (puo *PersonaUpdateOne) RemoveGenderIIDs(ids ...int) *PersonaUpdateOne {
	puo.mutation.RemoveGenderIIDs(ids...)
	return puo
}

// RemoveGenderIs removes genderIs edges to Gender.
func (puo *PersonaUpdateOne) RemoveGenderIs(g ...*Gender) *PersonaUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return puo.RemoveGenderIIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (puo *PersonaUpdateOne) Save(ctx context.Context) (*Persona, error) {
	var (
		err  error
		node *Persona
	)
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.gremlinSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.gremlinSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PersonaUpdateOne) SaveX(ctx context.Context) *Persona {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PersonaUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PersonaUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PersonaUpdateOne) check() error {
	if v, ok := puo.mutation.Age(); ok {
		if err := persona.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf("ent: validator failed for field \"age\": %w", err)}
		}
	}
	return nil
}

func (puo *PersonaUpdateOne) gremlinSave(ctx context.Context) (*Persona, error) {
	res := &gremlin.Response{}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Persona.ID for update")}
	}
	query, bindings := puo.gremlin(id).Query()
	if err := puo.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	pe := &Persona{config: puo.config}
	if err := pe.FromResponse(res); err != nil {
		return nil, err
	}
	return pe, nil
}

func (puo *PersonaUpdateOne) gremlin(id int) *dsl.Traversal {
	v := g.V(id)
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := puo.mutation.Age(); ok {
		v.Property(dsl.Single, persona.FieldAge, value)
	}
	if value, ok := puo.mutation.AddedAge(); ok {
		v.Property(dsl.Single, persona.FieldAge, __.Union(__.Values(persona.FieldAge), __.Constant(value)).Sum())
	}
	if value, ok := puo.mutation.Name(); ok {
		v.Property(dsl.Single, persona.FieldName, value)
	}
	if value, ok := puo.mutation.Gender(); ok {
		v.Property(dsl.Single, persona.FieldGender, value)
	}
	for _, id := range puo.mutation.RemovedGenderIsIDs() {
		tr := rv.Clone().OutE(persona.GenderIsLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range puo.mutation.GenderIsIDs() {
		v.AddE(persona.GenderIsLabel).To(g.V(id)).OutV()
	}
	v.ValueMap(true)
	trs = append(trs, v)
	return dsl.Join(trs...)
}
