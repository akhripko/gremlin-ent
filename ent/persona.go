// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/gremlin"
)

// Persona is the model entity for the Persona schema.
type Persona struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender string `json:"gender,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PersonaQuery when eager-loading is set.
	Edges PersonaEdges `json:"edges"`
}

// PersonaEdges holds the relations/edges for other nodes in the graph.
type PersonaEdges struct {
	// GenderIs holds the value of the genderIs edge.
	GenderIs []*Gender
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// GenderIsOrErr returns the GenderIs value or an error if the edge
// was not loaded in eager-loading.
func (e PersonaEdges) GenderIsOrErr() ([]*Gender, error) {
	if e.loadedTypes[0] {
		return e.GenderIs, nil
	}
	return nil, &NotLoadedError{edge: "genderIs"}
}

// FromResponse scans the gremlin response data into Persona.
func (pe *Persona) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scanpe struct {
		ID     int    `json:"id,omitempty"`
		Age    int    `json:"age,omitempty"`
		Name   string `json:"name,omitempty"`
		Gender string `json:"gender,omitempty"`
	}
	if err := vmap.Decode(&scanpe); err != nil {
		return err
	}
	pe.ID = scanpe.ID
	pe.Age = scanpe.Age
	pe.Name = scanpe.Name
	pe.Gender = scanpe.Gender
	return nil
}

// QueryGenderIs queries the genderIs edge of the Persona.
func (pe *Persona) QueryGenderIs() *GenderQuery {
	return (&PersonaClient{config: pe.config}).QueryGenderIs(pe)
}

// Update returns a builder for updating this Persona.
// Note that, you need to call Persona.Unwrap() before calling this method, if this Persona
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *Persona) Update() *PersonaUpdateOne {
	return (&PersonaClient{config: pe.config}).UpdateOne(pe)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pe *Persona) Unwrap() *Persona {
	tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: Persona is not a transactional entity")
	}
	pe.config.driver = tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *Persona) String() string {
	var builder strings.Builder
	builder.WriteString("Persona(")
	builder.WriteString(fmt.Sprintf("id=%v", pe.ID))
	builder.WriteString(", age=")
	builder.WriteString(fmt.Sprintf("%v", pe.Age))
	builder.WriteString(", name=")
	builder.WriteString(pe.Name)
	builder.WriteString(", gender=")
	builder.WriteString(pe.Gender)
	builder.WriteByte(')')
	return builder.String()
}

// Personas is a parsable slice of Persona.
type Personas []*Persona

// FromResponse scans the gremlin response data into Personas.
func (pe *Personas) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scanpe []struct {
		ID     int    `json:"id,omitempty"`
		Age    int    `json:"age,omitempty"`
		Name   string `json:"name,omitempty"`
		Gender string `json:"gender,omitempty"`
	}
	if err := vmap.Decode(&scanpe); err != nil {
		return err
	}
	for _, v := range scanpe {
		*pe = append(*pe, &Persona{
			ID:     v.ID,
			Age:    v.Age,
			Name:   v.Name,
			Gender: v.Gender,
		})
	}
	return nil
}

func (pe Personas) config(cfg config) {
	for _i := range pe {
		pe[_i].config = cfg
	}
}
