// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/akhripko/gremlin-ent/ent/persona"
	"github.com/facebook/ent/dialect/gremlin"
	"github.com/facebook/ent/dialect/gremlin/graph/dsl"
	"github.com/facebook/ent/dialect/gremlin/graph/dsl/g"
)

// PersonaCreate is the builder for creating a Persona entity.
type PersonaCreate struct {
	config
	mutation *PersonaMutation
	hooks    []Hook
}

// SetAge sets the age field.
func (pc *PersonaCreate) SetAge(i int) *PersonaCreate {
	pc.mutation.SetAge(i)
	return pc
}

// SetName sets the name field.
func (pc *PersonaCreate) SetName(s string) *PersonaCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetNillableName sets the name field if the given value is not nil.
func (pc *PersonaCreate) SetNillableName(s *string) *PersonaCreate {
	if s != nil {
		pc.SetName(*s)
	}
	return pc
}

// SetGender sets the gender field.
func (pc *PersonaCreate) SetGender(s string) *PersonaCreate {
	pc.mutation.SetGender(s)
	return pc
}

// SetNillableGender sets the gender field if the given value is not nil.
func (pc *PersonaCreate) SetNillableGender(s *string) *PersonaCreate {
	if s != nil {
		pc.SetGender(*s)
	}
	return pc
}

// SetID sets the id field.
func (pc *PersonaCreate) SetID(i int) *PersonaCreate {
	pc.mutation.SetID(i)
	return pc
}

// AddGenderIIDs adds the genderIs edge to Gender by ids.
func (pc *PersonaCreate) AddGenderIIDs(ids ...int) *PersonaCreate {
	pc.mutation.AddGenderIIDs(ids...)
	return pc
}

// AddGenderIs adds the genderIs edges to Gender.
func (pc *PersonaCreate) AddGenderIs(g ...*Gender) *PersonaCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return pc.AddGenderIIDs(ids...)
}

// Mutation returns the PersonaMutation object of the builder.
func (pc *PersonaCreate) Mutation() *PersonaMutation {
	return pc.mutation
}

// Save creates the Persona in the database.
func (pc *PersonaCreate) Save(ctx context.Context) (*Persona, error) {
	var (
		err  error
		node *Persona
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.gremlinSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			node, err = pc.gremlinSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PersonaCreate) SaveX(ctx context.Context) *Persona {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (pc *PersonaCreate) defaults() {
	if _, ok := pc.mutation.Name(); !ok {
		v := persona.DefaultName
		pc.mutation.SetName(v)
	}
	if _, ok := pc.mutation.Gender(); !ok {
		v := persona.DefaultGender
		pc.mutation.SetGender(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PersonaCreate) check() error {
	if _, ok := pc.mutation.Age(); !ok {
		return &ValidationError{Name: "age", err: errors.New("ent: missing required field \"age\"")}
	}
	if v, ok := pc.mutation.Age(); ok {
		if err := persona.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf("ent: validator failed for field \"age\": %w", err)}
		}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := pc.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New("ent: missing required field \"gender\"")}
	}
	if v, ok := pc.mutation.ID(); ok {
		if err := persona.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf("ent: validator failed for field \"id\": %w", err)}
		}
	}
	return nil
}

func (pc *PersonaCreate) gremlinSave(ctx context.Context) (*Persona, error) {
	res := &gremlin.Response{}
	query, bindings := pc.gremlin().Query()
	if err := pc.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	pe := &Persona{config: pc.config}
	if err := pe.FromResponse(res); err != nil {
		return nil, err
	}
	return pe, nil
}

func (pc *PersonaCreate) gremlin() *dsl.Traversal {
	v := g.AddV(persona.Label)
	if value, ok := pc.mutation.Age(); ok {
		v.Property(dsl.Single, persona.FieldAge, value)
	}
	if value, ok := pc.mutation.Name(); ok {
		v.Property(dsl.Single, persona.FieldName, value)
	}
	if value, ok := pc.mutation.Gender(); ok {
		v.Property(dsl.Single, persona.FieldGender, value)
	}
	for _, id := range pc.mutation.GenderIsIDs() {
		v.AddE(persona.GenderIsLabel).To(g.V(id)).OutV()
	}
	return v.ValueMap(true)
}

// PersonaCreateBulk is the builder for creating a bulk of Persona entities.
type PersonaCreateBulk struct {
	config
	builders []*PersonaCreate
}
