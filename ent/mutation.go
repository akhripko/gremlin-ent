// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/akhripko/gremlin-ent/ent/gender"
	"github.com/akhripko/gremlin-ent/ent/persona"

	"github.com/facebook/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeGender  = "Gender"
	TypePersona = "Persona"
)

// GenderMutation represents an operation that mutate the Genders
// nodes in the graph.
type GenderMutation struct {
	config
	op              Op
	typ             string
	id              *int
	value           *string
	clearedFields   map[string]struct{}
	personas        map[int]struct{}
	removedpersonas map[int]struct{}
	clearedpersonas bool
	done            bool
	oldValue        func(context.Context) (*Gender, error)
}

var _ ent.Mutation = (*GenderMutation)(nil)

// genderOption allows to manage the mutation configuration using functional options.
type genderOption func(*GenderMutation)

// newGenderMutation creates new mutation for $n.Name.
func newGenderMutation(c config, op Op, opts ...genderOption) *GenderMutation {
	m := &GenderMutation{
		config:        c,
		op:            op,
		typ:           TypeGender,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGenderID sets the id field of the mutation.
func withGenderID(id int) genderOption {
	return func(m *GenderMutation) {
		var (
			err   error
			once  sync.Once
			value *Gender
		)
		m.oldValue = func(ctx context.Context) (*Gender, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Gender.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGender sets the old Gender of the mutation.
func withGender(node *Gender) genderOption {
	return func(m *GenderMutation) {
		m.oldValue = func(context.Context) (*Gender, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GenderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GenderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that, this
// operation is accepted only on Gender creation.
func (m *GenderMutation) SetID(id int) {
	m.id = &id
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *GenderMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetValue sets the value field.
func (m *GenderMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value value in the mutation.
func (m *GenderMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old value value of the Gender.
// If the Gender object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *GenderMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldValue is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue reset all changes of the "value" field.
func (m *GenderMutation) ResetValue() {
	m.value = nil
}

// AddPersonaIDs adds the personas edge to Persona by ids.
func (m *GenderMutation) AddPersonaIDs(ids ...int) {
	if m.personas == nil {
		m.personas = make(map[int]struct{})
	}
	for i := range ids {
		m.personas[ids[i]] = struct{}{}
	}
}

// ClearPersonas clears the personas edge to Persona.
func (m *GenderMutation) ClearPersonas() {
	m.clearedpersonas = true
}

// PersonasCleared returns if the edge personas was cleared.
func (m *GenderMutation) PersonasCleared() bool {
	return m.clearedpersonas
}

// RemovePersonaIDs removes the personas edge to Persona by ids.
func (m *GenderMutation) RemovePersonaIDs(ids ...int) {
	if m.removedpersonas == nil {
		m.removedpersonas = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpersonas[ids[i]] = struct{}{}
	}
}

// RemovedPersonas returns the removed ids of personas.
func (m *GenderMutation) RemovedPersonasIDs() (ids []int) {
	for id := range m.removedpersonas {
		ids = append(ids, id)
	}
	return
}

// PersonasIDs returns the personas ids in the mutation.
func (m *GenderMutation) PersonasIDs() (ids []int) {
	for id := range m.personas {
		ids = append(ids, id)
	}
	return
}

// ResetPersonas reset all changes of the "personas" edge.
func (m *GenderMutation) ResetPersonas() {
	m.personas = nil
	m.clearedpersonas = false
	m.removedpersonas = nil
}

// Op returns the operation name.
func (m *GenderMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Gender).
func (m *GenderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *GenderMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.value != nil {
		fields = append(fields, gender.FieldValue)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *GenderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case gender.FieldValue:
		return m.Value()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *GenderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case gender.FieldValue:
		return m.OldValue(ctx)
	}
	return nil, fmt.Errorf("unknown Gender field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *GenderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case gender.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	}
	return fmt.Errorf("unknown Gender field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *GenderMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *GenderMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *GenderMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Gender numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *GenderMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *GenderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *GenderMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Gender nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *GenderMutation) ResetField(name string) error {
	switch name {
	case gender.FieldValue:
		m.ResetValue()
		return nil
	}
	return fmt.Errorf("unknown Gender field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *GenderMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.personas != nil {
		edges = append(edges, gender.EdgePersonas)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *GenderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case gender.EdgePersonas:
		ids := make([]ent.Value, 0, len(m.personas))
		for id := range m.personas {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *GenderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpersonas != nil {
		edges = append(edges, gender.EdgePersonas)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *GenderMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case gender.EdgePersonas:
		ids := make([]ent.Value, 0, len(m.removedpersonas))
		for id := range m.removedpersonas {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *GenderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpersonas {
		edges = append(edges, gender.EdgePersonas)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *GenderMutation) EdgeCleared(name string) bool {
	switch name {
	case gender.EdgePersonas:
		return m.clearedpersonas
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *GenderMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Gender unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *GenderMutation) ResetEdge(name string) error {
	switch name {
	case gender.EdgePersonas:
		m.ResetPersonas()
		return nil
	}
	return fmt.Errorf("unknown Gender edge %s", name)
}

// PersonaMutation represents an operation that mutate the Personas
// nodes in the graph.
type PersonaMutation struct {
	config
	op              Op
	typ             string
	id              *int
	age             *int
	addage          *int
	name            *string
	gender          *string
	clearedFields   map[string]struct{}
	genderIs        map[int]struct{}
	removedgenderIs map[int]struct{}
	clearedgenderIs bool
	done            bool
	oldValue        func(context.Context) (*Persona, error)
}

var _ ent.Mutation = (*PersonaMutation)(nil)

// personaOption allows to manage the mutation configuration using functional options.
type personaOption func(*PersonaMutation)

// newPersonaMutation creates new mutation for $n.Name.
func newPersonaMutation(c config, op Op, opts ...personaOption) *PersonaMutation {
	m := &PersonaMutation{
		config:        c,
		op:            op,
		typ:           TypePersona,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPersonaID sets the id field of the mutation.
func withPersonaID(id int) personaOption {
	return func(m *PersonaMutation) {
		var (
			err   error
			once  sync.Once
			value *Persona
		)
		m.oldValue = func(ctx context.Context) (*Persona, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Persona.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPersona sets the old Persona of the mutation.
func withPersona(node *Persona) personaOption {
	return func(m *PersonaMutation) {
		m.oldValue = func(context.Context) (*Persona, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PersonaMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PersonaMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that, this
// operation is accepted only on Persona creation.
func (m *PersonaMutation) SetID(id int) {
	m.id = &id
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PersonaMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetAge sets the age field.
func (m *PersonaMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the age value in the mutation.
func (m *PersonaMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old age value of the Persona.
// If the Persona object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PersonaMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAge is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to age.
func (m *PersonaMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the age field in this mutation.
func (m *PersonaMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ResetAge reset all changes of the "age" field.
func (m *PersonaMutation) ResetAge() {
	m.age = nil
	m.addage = nil
}

// SetName sets the name field.
func (m *PersonaMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *PersonaMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Persona.
// If the Persona object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PersonaMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *PersonaMutation) ResetName() {
	m.name = nil
}

// SetGender sets the gender field.
func (m *PersonaMutation) SetGender(s string) {
	m.gender = &s
}

// Gender returns the gender value in the mutation.
func (m *PersonaMutation) Gender() (r string, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old gender value of the Persona.
// If the Persona object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PersonaMutation) OldGender(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGender is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// ResetGender reset all changes of the "gender" field.
func (m *PersonaMutation) ResetGender() {
	m.gender = nil
}

// AddGenderIIDs adds the genderIs edge to Gender by ids.
func (m *PersonaMutation) AddGenderIIDs(ids ...int) {
	if m.genderIs == nil {
		m.genderIs = make(map[int]struct{})
	}
	for i := range ids {
		m.genderIs[ids[i]] = struct{}{}
	}
}

// ClearGenderIs clears the genderIs edge to Gender.
func (m *PersonaMutation) ClearGenderIs() {
	m.clearedgenderIs = true
}

// GenderIsCleared returns if the edge genderIs was cleared.
func (m *PersonaMutation) GenderIsCleared() bool {
	return m.clearedgenderIs
}

// RemoveGenderIIDs removes the genderIs edge to Gender by ids.
func (m *PersonaMutation) RemoveGenderIIDs(ids ...int) {
	if m.removedgenderIs == nil {
		m.removedgenderIs = make(map[int]struct{})
	}
	for i := range ids {
		m.removedgenderIs[ids[i]] = struct{}{}
	}
}

// RemovedGenderIs returns the removed ids of genderIs.
func (m *PersonaMutation) RemovedGenderIsIDs() (ids []int) {
	for id := range m.removedgenderIs {
		ids = append(ids, id)
	}
	return
}

// GenderIsIDs returns the genderIs ids in the mutation.
func (m *PersonaMutation) GenderIsIDs() (ids []int) {
	for id := range m.genderIs {
		ids = append(ids, id)
	}
	return
}

// ResetGenderIs reset all changes of the "genderIs" edge.
func (m *PersonaMutation) ResetGenderIs() {
	m.genderIs = nil
	m.clearedgenderIs = false
	m.removedgenderIs = nil
}

// Op returns the operation name.
func (m *PersonaMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Persona).
func (m *PersonaMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PersonaMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.age != nil {
		fields = append(fields, persona.FieldAge)
	}
	if m.name != nil {
		fields = append(fields, persona.FieldName)
	}
	if m.gender != nil {
		fields = append(fields, persona.FieldGender)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PersonaMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case persona.FieldAge:
		return m.Age()
	case persona.FieldName:
		return m.Name()
	case persona.FieldGender:
		return m.Gender()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PersonaMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case persona.FieldAge:
		return m.OldAge(ctx)
	case persona.FieldName:
		return m.OldName(ctx)
	case persona.FieldGender:
		return m.OldGender(ctx)
	}
	return nil, fmt.Errorf("unknown Persona field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PersonaMutation) SetField(name string, value ent.Value) error {
	switch name {
	case persona.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case persona.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case persona.FieldGender:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	}
	return fmt.Errorf("unknown Persona field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PersonaMutation) AddedFields() []string {
	var fields []string
	if m.addage != nil {
		fields = append(fields, persona.FieldAge)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PersonaMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case persona.FieldAge:
		return m.AddedAge()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PersonaMutation) AddField(name string, value ent.Value) error {
	switch name {
	case persona.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	}
	return fmt.Errorf("unknown Persona numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PersonaMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PersonaMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PersonaMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Persona nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PersonaMutation) ResetField(name string) error {
	switch name {
	case persona.FieldAge:
		m.ResetAge()
		return nil
	case persona.FieldName:
		m.ResetName()
		return nil
	case persona.FieldGender:
		m.ResetGender()
		return nil
	}
	return fmt.Errorf("unknown Persona field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PersonaMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.genderIs != nil {
		edges = append(edges, persona.EdgeGenderIs)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PersonaMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case persona.EdgeGenderIs:
		ids := make([]ent.Value, 0, len(m.genderIs))
		for id := range m.genderIs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PersonaMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedgenderIs != nil {
		edges = append(edges, persona.EdgeGenderIs)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PersonaMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case persona.EdgeGenderIs:
		ids := make([]ent.Value, 0, len(m.removedgenderIs))
		for id := range m.removedgenderIs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PersonaMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedgenderIs {
		edges = append(edges, persona.EdgeGenderIs)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PersonaMutation) EdgeCleared(name string) bool {
	switch name {
	case persona.EdgeGenderIs:
		return m.clearedgenderIs
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PersonaMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Persona unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PersonaMutation) ResetEdge(name string) error {
	switch name {
	case persona.EdgeGenderIs:
		m.ResetGenderIs()
		return nil
	}
	return fmt.Errorf("unknown Persona edge %s", name)
}
