// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"
	"net/url"

	"github.com/akhripko/gremlin-ent/ent/gender"
	"github.com/akhripko/gremlin-ent/ent/persona"

	"github.com/facebook/ent/dialect"
	"github.com/facebook/ent/dialect/gremlin"
	"github.com/facebook/ent/dialect/gremlin/graph/dsl"
	"github.com/facebook/ent/dialect/gremlin/graph/dsl/g"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Gender is the client for interacting with the Gender builders.
	Gender *GenderClient
	// Persona is the client for interacting with the Persona builders.
	Persona *PersonaClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Gender = NewGenderClient(c.config)
	c.Persona = NewPersonaClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.Gremlin:
		u, err := url.Parse(dataSourceName)
		if err != nil {
			return nil, err
		}
		c, err := gremlin.NewClient(gremlin.Config{
			Endpoint: gremlin.Endpoint{
				URL: u,
			},
		})
		if err != nil {
			return nil, err
		}
		drv := gremlin.NewDriver(c)
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:     ctx,
		config:  cfg,
		Gender:  NewGenderClient(cfg),
		Persona: NewPersonaClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Gender.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Gender.Use(hooks...)
	c.Persona.Use(hooks...)
}

// GenderClient is a client for the Gender schema.
type GenderClient struct {
	config
}

// NewGenderClient returns a client for the Gender from the given config.
func NewGenderClient(c config) *GenderClient {
	return &GenderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gender.Hooks(f(g(h())))`.
func (c *GenderClient) Use(hooks ...Hook) {
	c.hooks.Gender = append(c.hooks.Gender, hooks...)
}

// Create returns a create builder for Gender.
func (c *GenderClient) Create() *GenderCreate {
	mutation := newGenderMutation(c.config, OpCreate)
	return &GenderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Gender entities.
func (c *GenderClient) CreateBulk(builders ...*GenderCreate) *GenderCreateBulk {
	return &GenderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Gender.
func (c *GenderClient) Update() *GenderUpdate {
	mutation := newGenderMutation(c.config, OpUpdate)
	return &GenderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GenderClient) UpdateOne(ge *Gender) *GenderUpdateOne {
	mutation := newGenderMutation(c.config, OpUpdateOne, withGender(ge))
	return &GenderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GenderClient) UpdateOneID(id int) *GenderUpdateOne {
	mutation := newGenderMutation(c.config, OpUpdateOne, withGenderID(id))
	return &GenderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Gender.
func (c *GenderClient) Delete() *GenderDelete {
	mutation := newGenderMutation(c.config, OpDelete)
	return &GenderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GenderClient) DeleteOne(ge *Gender) *GenderDeleteOne {
	return c.DeleteOneID(ge.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GenderClient) DeleteOneID(id int) *GenderDeleteOne {
	builder := c.Delete().Where(gender.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GenderDeleteOne{builder}
}

// Query returns a query builder for Gender.
func (c *GenderClient) Query() *GenderQuery {
	return &GenderQuery{config: c.config}
}

// Get returns a Gender entity by its id.
func (c *GenderClient) Get(ctx context.Context, id int) (*Gender, error) {
	return c.Query().Where(gender.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GenderClient) GetX(ctx context.Context, id int) *Gender {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPersonas queries the personas edge of a Gender.
func (c *GenderClient) QueryPersonas(ge *Gender) *PersonaQuery {
	query := &PersonaQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *dsl.Traversal, _ error) {

		fromV = g.V(ge.ID).InE(persona.GenderIsLabel).OutV()
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GenderClient) Hooks() []Hook {
	return c.hooks.Gender
}

// PersonaClient is a client for the Persona schema.
type PersonaClient struct {
	config
}

// NewPersonaClient returns a client for the Persona from the given config.
func NewPersonaClient(c config) *PersonaClient {
	return &PersonaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `persona.Hooks(f(g(h())))`.
func (c *PersonaClient) Use(hooks ...Hook) {
	c.hooks.Persona = append(c.hooks.Persona, hooks...)
}

// Create returns a create builder for Persona.
func (c *PersonaClient) Create() *PersonaCreate {
	mutation := newPersonaMutation(c.config, OpCreate)
	return &PersonaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Persona entities.
func (c *PersonaClient) CreateBulk(builders ...*PersonaCreate) *PersonaCreateBulk {
	return &PersonaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Persona.
func (c *PersonaClient) Update() *PersonaUpdate {
	mutation := newPersonaMutation(c.config, OpUpdate)
	return &PersonaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PersonaClient) UpdateOne(pe *Persona) *PersonaUpdateOne {
	mutation := newPersonaMutation(c.config, OpUpdateOne, withPersona(pe))
	return &PersonaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PersonaClient) UpdateOneID(id int) *PersonaUpdateOne {
	mutation := newPersonaMutation(c.config, OpUpdateOne, withPersonaID(id))
	return &PersonaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Persona.
func (c *PersonaClient) Delete() *PersonaDelete {
	mutation := newPersonaMutation(c.config, OpDelete)
	return &PersonaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PersonaClient) DeleteOne(pe *Persona) *PersonaDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PersonaClient) DeleteOneID(id int) *PersonaDeleteOne {
	builder := c.Delete().Where(persona.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PersonaDeleteOne{builder}
}

// Query returns a query builder for Persona.
func (c *PersonaClient) Query() *PersonaQuery {
	return &PersonaQuery{config: c.config}
}

// Get returns a Persona entity by its id.
func (c *PersonaClient) Get(ctx context.Context, id int) (*Persona, error) {
	return c.Query().Where(persona.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PersonaClient) GetX(ctx context.Context, id int) *Persona {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGenderIs queries the genderIs edge of a Persona.
func (c *PersonaClient) QueryGenderIs(pe *Persona) *GenderQuery {
	query := &GenderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *dsl.Traversal, _ error) {

		fromV = g.V(pe.ID).OutE(persona.GenderIsLabel).InV()
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PersonaClient) Hooks() []Hook {
	return c.hooks.Persona
}
