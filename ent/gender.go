// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/gremlin"
)

// Gender is the model entity for the Gender schema.
type Gender struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GenderQuery when eager-loading is set.
	Edges GenderEdges `json:"edges"`
}

// GenderEdges holds the relations/edges for other nodes in the graph.
type GenderEdges struct {
	// Personas holds the value of the personas edge.
	Personas []*Persona
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PersonasOrErr returns the Personas value or an error if the edge
// was not loaded in eager-loading.
func (e GenderEdges) PersonasOrErr() ([]*Persona, error) {
	if e.loadedTypes[0] {
		return e.Personas, nil
	}
	return nil, &NotLoadedError{edge: "personas"}
}

// FromResponse scans the gremlin response data into Gender.
func (ge *Gender) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scange struct {
		ID    int    `json:"id,omitempty"`
		Value string `json:"value,omitempty"`
	}
	if err := vmap.Decode(&scange); err != nil {
		return err
	}
	ge.ID = scange.ID
	ge.Value = scange.Value
	return nil
}

// QueryPersonas queries the personas edge of the Gender.
func (ge *Gender) QueryPersonas() *PersonaQuery {
	return (&GenderClient{config: ge.config}).QueryPersonas(ge)
}

// Update returns a builder for updating this Gender.
// Note that, you need to call Gender.Unwrap() before calling this method, if this Gender
// was returned from a transaction, and the transaction was committed or rolled back.
func (ge *Gender) Update() *GenderUpdateOne {
	return (&GenderClient{config: ge.config}).UpdateOne(ge)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ge *Gender) Unwrap() *Gender {
	tx, ok := ge.config.driver.(*txDriver)
	if !ok {
		panic("ent: Gender is not a transactional entity")
	}
	ge.config.driver = tx.drv
	return ge
}

// String implements the fmt.Stringer.
func (ge *Gender) String() string {
	var builder strings.Builder
	builder.WriteString("Gender(")
	builder.WriteString(fmt.Sprintf("id=%v", ge.ID))
	builder.WriteString(", value=")
	builder.WriteString(ge.Value)
	builder.WriteByte(')')
	return builder.String()
}

// Genders is a parsable slice of Gender.
type Genders []*Gender

// FromResponse scans the gremlin response data into Genders.
func (ge *Genders) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scange []struct {
		ID    int    `json:"id,omitempty"`
		Value string `json:"value,omitempty"`
	}
	if err := vmap.Decode(&scange); err != nil {
		return err
	}
	for _, v := range scange {
		*ge = append(*ge, &Gender{
			ID:    v.ID,
			Value: v.Value,
		})
	}
	return nil
}

func (ge Genders) config(cfg config) {
	for _i := range ge {
		ge[_i].config = cfg
	}
}
