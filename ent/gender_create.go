// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/akhripko/gremlin-ent/ent/gender"
	"github.com/akhripko/gremlin-ent/ent/persona"
	"github.com/facebook/ent/dialect/gremlin"
	"github.com/facebook/ent/dialect/gremlin/graph/dsl"
	"github.com/facebook/ent/dialect/gremlin/graph/dsl/g"
)

// GenderCreate is the builder for creating a Gender entity.
type GenderCreate struct {
	config
	mutation *GenderMutation
	hooks    []Hook
}

// SetValue sets the value field.
func (gc *GenderCreate) SetValue(s string) *GenderCreate {
	gc.mutation.SetValue(s)
	return gc
}

// SetID sets the id field.
func (gc *GenderCreate) SetID(i int) *GenderCreate {
	gc.mutation.SetID(i)
	return gc
}

// AddPersonaIDs adds the personas edge to Persona by ids.
func (gc *GenderCreate) AddPersonaIDs(ids ...int) *GenderCreate {
	gc.mutation.AddPersonaIDs(ids...)
	return gc
}

// AddPersonas adds the personas edges to Persona.
func (gc *GenderCreate) AddPersonas(p ...*Persona) *GenderCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gc.AddPersonaIDs(ids...)
}

// Mutation returns the GenderMutation object of the builder.
func (gc *GenderCreate) Mutation() *GenderMutation {
	return gc.mutation
}

// Save creates the Gender in the database.
func (gc *GenderCreate) Save(ctx context.Context) (*Gender, error) {
	var (
		err  error
		node *Gender
	)
	if len(gc.hooks) == 0 {
		if err = gc.check(); err != nil {
			return nil, err
		}
		node, err = gc.gremlinSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GenderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gc.check(); err != nil {
				return nil, err
			}
			gc.mutation = mutation
			node, err = gc.gremlinSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gc.hooks) - 1; i >= 0; i-- {
			mut = gc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GenderCreate) SaveX(ctx context.Context) *Gender {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (gc *GenderCreate) check() error {
	if _, ok := gc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New("ent: missing required field \"value\"")}
	}
	if v, ok := gc.mutation.ID(); ok {
		if err := gender.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf("ent: validator failed for field \"id\": %w", err)}
		}
	}
	return nil
}

func (gc *GenderCreate) gremlinSave(ctx context.Context) (*Gender, error) {
	res := &gremlin.Response{}
	query, bindings := gc.gremlin().Query()
	if err := gc.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	ge := &Gender{config: gc.config}
	if err := ge.FromResponse(res); err != nil {
		return nil, err
	}
	return ge, nil
}

func (gc *GenderCreate) gremlin() *dsl.Traversal {
	v := g.AddV(gender.Label)
	if value, ok := gc.mutation.Value(); ok {
		v.Property(dsl.Single, gender.FieldValue, value)
	}
	for _, id := range gc.mutation.PersonasIDs() {
		v.AddE(persona.GenderIsLabel).From(g.V(id)).InV()
	}
	return v.ValueMap(true)
}

// GenderCreateBulk is the builder for creating a bulk of Gender entities.
type GenderCreateBulk struct {
	config
	builders []*GenderCreate
}
